import{S as _a,i as xa,s as Ca,A as In,j as La,m as Sa,o as Ka,p as Pa,q as la,v as Ya,r as Da,w as Qa,L as ua,e as o,t as l,k,c as p,a as c,g as u,d as a,n as f,b as g,f as t,E as e,G as Ha}from"../../chunks/vendor-24f10c49.js";import{B as ja}from"../../chunks/blog-ede6f8b8.js";function Ga(K){let r,v,y,w,h=`<code class="language-ts"><span class="token comment">// what is a facet?</span>
<span class="token keyword">type</span> <span class="token class-name">ContentType</span> <span class="token operator">=</span> <span class="token string">'videoCourse'</span> <span class="token operator">|</span> <span class="token string">'interactiveCourse'</span> <span class="token operator">|</span> <span class="token string">'project'</span>
<span class="token keyword">type</span> <span class="token class-name">Level</span> <span class="token operator">=</span> <span class="token string">'beginner'</span> <span class="token operator">|</span> <span class="token string">'intermediate'</span> <span class="token operator">|</span> <span class="token string">'advanced'</span>
<span class="token keyword">type</span> <span class="token class-name">TimeFrame</span> <span class="token operator">=</span> <span class="token string">'lastSixMonths'</span> <span class="token operator">|</span> <span class="token string">'lastYear'</span> <span class="token operator">|</span> <span class="token string">'older'</span></code>`,d,b,mn,z,T,ra=`<code class="language-ts"><span class="token comment">// what does an aggregation look like?</span>
<span class="token keyword">type</span> <span class="token class-name">EsAggregation</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  aggregations<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    contentType<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      key<span class="token operator">:</span> ContentType
      levels<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        buckets<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          key<span class="token operator">:</span> Level
          timeFrame<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            buckets<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
              key<span class="token operator">:</span> TimeFrame
              doc_count<span class="token operator">:</span> <span class="token builtin">number</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,V,P,dn,Z,E,ia=`<code class="language-ts"><span class="token comment">// an aspirational type. All the context we could have down at the bottom of the tree.</span>
<span class="token keyword">type</span> <span class="token class-name">Leaf</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  contentType<span class="token operator">:</span> ContentType
  level<span class="token operator">:</span> Level
  timeFrame<span class="token operator">:</span> TimeFrame
  count<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">&#125;</span></code>`,X,Y,wn,$,B,ka=`<code class="language-ts"><span class="token keyword">const</span> flatten <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  aggregations<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    contentType<span class="token operator">:</span> <span class="token punctuation">&#123;</span> buckets<span class="token operator">:</span> ctBuckets <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token operator">:</span> EsAggregation<span class="token punctuation">)</span><span class="token operator">:</span> Leaf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=></span>
  ctBuckets<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">reduce</span><span class="token generic class-name"><span class="token operator">&lt;</span>Leaf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>ctLeafs<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> contentType<span class="token punctuation">,</span> levels<span class="token operator">:</span> <span class="token punctuation">&#123;</span> buckets<span class="token operator">:</span> levelBuckets <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span>
      levelBuckets<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span>levelLeafs<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> level<span class="token punctuation">,</span> timeFrame<span class="token operator">:</span> <span class="token punctuation">&#123;</span> buckets<span class="token operator">:</span> timeBuckets <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span>
          timeBuckets<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span>timeLeafs<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> timeFrame<span class="token punctuation">,</span> doc_count<span class="token operator">:</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>
              <span class="token operator">...</span>timeLeafs<span class="token punctuation">,</span>
              <span class="token punctuation">&#123;</span> contentType<span class="token punctuation">,</span> level<span class="token punctuation">,</span> timeFrame<span class="token punctuation">,</span> count <span class="token punctuation">&#125;</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            levelLeafs
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        ctLeafs
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">)</span></code>`,nn,i,gn,O,vn,yn,I,bn,An,R,Tn,En,W,Bn,Fn,q,_n,xn,U,Cn,Ln,J,Sn,Kn,an,D,Pn,sn,F,fa=`<code class="language-ts"><span class="token comment">// What context do we want from a leaf?</span>
<span class="token keyword">type</span> <span class="token class-name">Reducer<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> leaf<span class="token operator">:</span> Leaf<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span>

<span class="token comment">// How do we put the reducer in that context?</span>
<span class="token keyword">const</span> reduce <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>
  <span class="token punctuation">&#123;</span>
    aggregations<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      contentType<span class="token operator">:</span> <span class="token punctuation">&#123;</span> buckets<span class="token operator">:</span> ctBuckets <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token operator">:</span> EsAggregation<span class="token punctuation">,</span>
  reducer<span class="token operator">:</span> Reducer<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>
  initialState<span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=></span>
  ctBuckets<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">reduce</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>ctState<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> contentType<span class="token punctuation">,</span> levels<span class="token operator">:</span> <span class="token punctuation">&#123;</span> buckets<span class="token operator">:</span> levelBuckets <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span>
      levelBuckets<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span>levelState<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> level<span class="token punctuation">,</span> timeFrame<span class="token operator">:</span> <span class="token punctuation">&#123;</span> buckets<span class="token operator">:</span> timeBuckets <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span>
          timeBuckets<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span>timeState<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> timeFrame<span class="token punctuation">,</span> doc_count<span class="token operator">:</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span>
              <span class="token function">reducer</span><span class="token punctuation">(</span>timeState<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> timeFrame<span class="token punctuation">,</span> level<span class="token punctuation">,</span> contentType<span class="token punctuation">,</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            levelState
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        ctState
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    initialState
  <span class="token punctuation">)</span></code>`,tn,Q,Yn,en,_,ha=`<code class="language-ts"><span class="token keyword">const</span> flatten <span class="token operator">=</span> <span class="token punctuation">(</span>agg<span class="token operator">:</span> EsAggregation<span class="token punctuation">)</span><span class="token operator">:</span> Leaf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=></span>
  <span class="token generic-function"><span class="token function">reduce</span><span class="token generic class-name"><span class="token operator">&lt;</span>Leaf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>agg<span class="token punctuation">,</span> <span class="token punctuation">(</span>leafs<span class="token punctuation">,</span> leaf<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>leafs<span class="token punctuation">,</span> leaf<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>`,on,A,Dn,N,Qn,Hn,pn,x,ma=`<code class="language-ts"><span class="token comment">// counts broken down by a facet</span>
<span class="token keyword">type</span> <span class="token class-name">CountsBy<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> countsByTime <span class="token operator">=</span> <span class="token punctuation">(</span>agg<span class="token operator">:</span> EsAggregation<span class="token punctuation">)</span><span class="token operator">:</span> CountsBy<span class="token operator">&lt;</span>TimeFrame<span class="token operator">></span> <span class="token operator">=></span>
  <span class="token function">reduce</span><span class="token punctuation">(</span>
    agg<span class="token punctuation">,</span>
    <span class="token punctuation">(</span>countsSoFar<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> timeFrame<span class="token punctuation">,</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token operator">...</span>countsSoFar<span class="token punctuation">,</span>
      <span class="token punctuation">[</span>timeFrame<span class="token punctuation">]</span><span class="token operator">:</span> countsSoFar<span class="token punctuation">[</span>timeFrame<span class="token punctuation">]</span> <span class="token operator">+</span> count
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> lastSixMonths<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> lastYear<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> older<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">)</span></code>`,cn,H,jn,ln,C,da=`<code class="language-tsx"><span class="token keyword">const</span> countsByLevel <span class="token operator">=</span> <span class="token punctuation">(</span>agg<span class="token operator">:</span> EsAggregation<span class="token punctuation">)</span><span class="token operator">:</span> CountsBy<span class="token operator">&lt;</span>Level<span class="token operator">></span> <span class="token operator">=></span>
  <span class="token function">reduce</span><span class="token punctuation">(</span>
    agg<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">countsSoFar<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> level<span class="token punctuation">,</span> timeFrame<span class="token punctuation">,</span> count <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>
      timeFrame <span class="token operator">===</span> <span class="token string">'older'</span>
        <span class="token operator">?</span> <span class="token punctuation">&#123;</span>
            <span class="token operator">...</span>countsSoFar<span class="token punctuation">,</span>
            <span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token operator">:</span> countsSoFar<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">+</span> count
          <span class="token punctuation">&#125;</span>
        <span class="token operator">:</span> countsSoFar<span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> beginner<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> intermediate<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> advanced<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">)</span></code>`,un,j,Gn,rn,L,wa=`<code class="language-ts"><span class="token keyword">type</span> <span class="token class-name">Filter</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  contentType<span class="token operator">:</span> ContentType<span class="token punctuation">[</span><span class="token punctuation">]</span>
  level<span class="token operator">:</span> Level<span class="token punctuation">[</span><span class="token punctuation">]</span>
  timeFrame<span class="token operator">:</span> TimeFrame<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> inFilter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> contentType<span class="token punctuation">,</span> level<span class="token punctuation">,</span> timeFrame <span class="token punctuation">&#125;</span><span class="token operator">:</span> Leaf<span class="token punctuation">,</span> filter<span class="token operator">:</span> Filter<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=></span>
  <span class="token punctuation">(</span>filter<span class="token punctuation">.</span>contentType<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> filter<span class="token punctuation">.</span>contentType<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>contentType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
  <span class="token punctuation">(</span>filter<span class="token punctuation">.</span>level<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> filter<span class="token punctuation">.</span>level<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
  <span class="token punctuation">(</span>filter<span class="token punctuation">.</span>timeFrame<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> filter<span class="token punctuation">.</span>timeFrame<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>timeFrame<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> filteredCountsByLevel <span class="token operator">=</span> <span class="token punctuation">(</span>agg<span class="token operator">:</span> EsAggregation<span class="token punctuation">,</span> filter<span class="token operator">:</span> Filter<span class="token punctuation">)</span><span class="token operator">:</span> CountsBy<span class="token operator">&lt;</span>Level<span class="token operator">></span> <span class="token operator">=></span>
  <span class="token function">reduce</span><span class="token punctuation">(</span>
    agg<span class="token punctuation">,</span>
    <span class="token punctuation">(</span>countsSoFar<span class="token punctuation">,</span> leaf<span class="token punctuation">)</span> <span class="token operator">=></span>
      <span class="token function">inFilter</span><span class="token punctuation">(</span>leaf<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>filter<span class="token punctuation">,</span> level<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token operator">?</span> <span class="token punctuation">&#123;</span>
            <span class="token operator">...</span>countsSoFar<span class="token punctuation">,</span>
            <span class="token punctuation">[</span>leaf<span class="token punctuation">.</span>level<span class="token punctuation">]</span><span class="token operator">:</span> countsSoFar<span class="token punctuation">[</span>leaf<span class="token punctuation">.</span>level<span class="token punctuation">]</span> <span class="token operator">+</span> leaf<span class="token punctuation">.</span>count
          <span class="token punctuation">&#125;</span>
        <span class="token operator">:</span> countsSoFar<span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> beginner<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> intermediate<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> advanced<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">)</span></code>`,kn,G,Mn,fn,M,S,On;return{c(){r=o("p"),v=l("In a search engine, we might want to be able to slice and dice the search results that came back by three different facets; by content type, by content level, and by timeframe."),y=k(),w=o("pre"),d=k(),b=o("p"),mn=l("When we apply a filter using one of these facets we want it to affect the counts when we are breaking down along some other facet, but not when we are looking for the counts on that facet. For example, when filtering to intermediate courses, we don\u2019t want that filter to appear to be applied when trying to find out how many beginner courses there were, or we would just always get zero."),z=k(),T=o("pre"),V=k(),P=o("p"),dn=l("We know that down at the leaf nodes of this tree we have all of the information we need to give any of the counts we are interested in. Particularly, leaf nodes (after processing) might look something like this."),Z=k(),E=o("pre"),X=k(),Y=o("p"),wn=l("If we can convert the elasticsearch aggregations to a flat list of leaf nodes in this form, it becomes much easier to ask questions about counts broken down by any given facet."),$=k(),B=o("pre"),nn=k(),i=o("p"),gn=l("The idea here is that at each step down the tree, we can get the information we want from that level in context and it will be available when we get to the leaf level through closure. When we get to the leaf level, we reach up to the "),O=o("code"),vn=l("timeBucket"),yn=l(" in context for a "),I=o("code"),bn=l("TimeFrame"),An=l(" and a "),R=o("code"),Tn=l("count"),En=l(", the "),W=o("code"),Bn=l("levelBucket"),Fn=l(" in context for a "),q=o("code"),_n=l("Level"),xn=l(", and the "),U=o("code"),Cn=l("ctBucket"),Ln=l(" in context for a "),J=o("code"),Sn=l("contentType"),Kn=l("."),an=k(),D=o("p"),Pn=l("This process could also be seen as \u201Cdenormalizing\u201D the tree. We are taking information that is held in common by the interior nodes of the tree, and duplicating it down to every leaf node. The result is a flat structure that is much easier to iterate over, but that contains duplicate information. What if we just wanted to describe how to iterate over the structure without explicitly flattening it?"),sn=k(),F=o("pre"),tn=k(),Q=o("p"),Yn=l("This is structurally the same, but now generic over which reducing operation. The type parameter here lets us tie together the initial state type, the output type, and the signature of the reducer. In fact, we can get back flatten by providing an appropriate reducer."),en=k(),_=o("pre"),on=k(),A=o("p"),Dn=l("What the reduce function is allowing us to do here is separate the complex logic of "),N=o("em"),Qn=l("how"),Hn=l(" we iterate over this structure from the comparatively simple logic of what we want to do with the result of that iteration. We have created a context in which we have all of the information we need, and the reduce function allows us to run arbitrary code within that context. Now it becomes easy to get the counts broken down by any given facet."),pn=k(),x=o("pre"),cn=k(),H=o("p"),jn=l("The related functions for other facets are a little trickier because our time bins overlap, which needs to be accounted for by our reducer."),ln=k(),C=o("pre"),un=k(),j=o("p"),Gn=l("How do we ask about the count given some set of filters? simple, we just add that filtering logic to our reducing function."),rn=k(),L=o("pre"),kn=k(),G=o("p"),Mn=l("Again, we separate our concerns. One function for the logic of deciding whether a leaf satisfies a filter, one function for counting up over leaves, and one function for finding the leaves we want to traverse over. Each individual function is easy to describe and therefore easy to test. Even better, they give us a vocabulary that makes their composition easy to describe; \u201Ccount the items under each leaf in the tree that satisfies the filter\u201D. Initially, setting the level in the filter to be the empty array might seem like a wart (and maybe it is, you can have your own aesthetic preferences). But it also has a nice clean interpretation; \u201Cwhen breaking down by level, pretend like there isn\u2019t a level filter.\u201D"),fn=k(),M=o("p"),S=o("a"),On=l("Typechecked playground demonstrating the code in this article"),this.h()},l(n){r=p(n,"P",{});var s=c(r);v=u(s,"In a search engine, we might want to be able to slice and dice the search results that came back by three different facets; by content type, by content level, and by timeframe."),s.forEach(a),y=f(n),w=p(n,"PRE",{class:!0});var ga=c(w);ga.forEach(a),d=f(n),b=p(n,"P",{});var Wn=c(b);mn=u(Wn,"When we apply a filter using one of these facets we want it to affect the counts when we are breaking down along some other facet, but not when we are looking for the counts on that facet. For example, when filtering to intermediate courses, we don\u2019t want that filter to appear to be applied when trying to find out how many beginner courses there were, or we would just always get zero."),Wn.forEach(a),z=f(n),T=p(n,"PRE",{class:!0});var va=c(T);va.forEach(a),V=f(n),P=p(n,"P",{});var qn=c(P);dn=u(qn,"We know that down at the leaf nodes of this tree we have all of the information we need to give any of the counts we are interested in. Particularly, leaf nodes (after processing) might look something like this."),qn.forEach(a),Z=f(n),E=p(n,"PRE",{class:!0});var ya=c(E);ya.forEach(a),X=f(n),Y=p(n,"P",{});var Un=c(Y);wn=u(Un,"If we can convert the elasticsearch aggregations to a flat list of leaf nodes in this form, it becomes much easier to ask questions about counts broken down by any given facet."),Un.forEach(a),$=f(n),B=p(n,"PRE",{class:!0});var ba=c(B);ba.forEach(a),nn=f(n),i=p(n,"P",{});var m=c(i);gn=u(m,"The idea here is that at each step down the tree, we can get the information we want from that level in context and it will be available when we get to the leaf level through closure. When we get to the leaf level, we reach up to the "),O=p(m,"CODE",{});var Jn=c(O);vn=u(Jn,"timeBucket"),Jn.forEach(a),yn=u(m," in context for a "),I=p(m,"CODE",{});var Nn=c(I);bn=u(Nn,"TimeFrame"),Nn.forEach(a),An=u(m," and a "),R=p(m,"CODE",{});var zn=c(R);Tn=u(zn,"count"),zn.forEach(a),En=u(m,", the "),W=p(m,"CODE",{});var Vn=c(W);Bn=u(Vn,"levelBucket"),Vn.forEach(a),Fn=u(m," in context for a "),q=p(m,"CODE",{});var Zn=c(q);_n=u(Zn,"Level"),Zn.forEach(a),xn=u(m,", and the "),U=p(m,"CODE",{});var Xn=c(U);Cn=u(Xn,"ctBucket"),Xn.forEach(a),Ln=u(m," in context for a "),J=p(m,"CODE",{});var $n=c(J);Sn=u($n,"contentType"),$n.forEach(a),Kn=u(m,"."),m.forEach(a),an=f(n),D=p(n,"P",{});var na=c(D);Pn=u(na,"This process could also be seen as \u201Cdenormalizing\u201D the tree. We are taking information that is held in common by the interior nodes of the tree, and duplicating it down to every leaf node. The result is a flat structure that is much easier to iterate over, but that contains duplicate information. What if we just wanted to describe how to iterate over the structure without explicitly flattening it?"),na.forEach(a),sn=f(n),F=p(n,"PRE",{class:!0});var Aa=c(F);Aa.forEach(a),tn=f(n),Q=p(n,"P",{});var aa=c(Q);Yn=u(aa,"This is structurally the same, but now generic over which reducing operation. The type parameter here lets us tie together the initial state type, the output type, and the signature of the reducer. In fact, we can get back flatten by providing an appropriate reducer."),aa.forEach(a),en=f(n),_=p(n,"PRE",{class:!0});var Ta=c(_);Ta.forEach(a),on=f(n),A=p(n,"P",{});var hn=c(A);Dn=u(hn,"What the reduce function is allowing us to do here is separate the complex logic of "),N=p(hn,"EM",{});var sa=c(N);Qn=u(sa,"how"),sa.forEach(a),Hn=u(hn," we iterate over this structure from the comparatively simple logic of what we want to do with the result of that iteration. We have created a context in which we have all of the information we need, and the reduce function allows us to run arbitrary code within that context. Now it becomes easy to get the counts broken down by any given facet."),hn.forEach(a),pn=f(n),x=p(n,"PRE",{class:!0});var Ea=c(x);Ea.forEach(a),cn=f(n),H=p(n,"P",{});var ta=c(H);jn=u(ta,"The related functions for other facets are a little trickier because our time bins overlap, which needs to be accounted for by our reducer."),ta.forEach(a),ln=f(n),C=p(n,"PRE",{class:!0});var Ba=c(C);Ba.forEach(a),un=f(n),j=p(n,"P",{});var ea=c(j);Gn=u(ea,"How do we ask about the count given some set of filters? simple, we just add that filtering logic to our reducing function."),ea.forEach(a),rn=f(n),L=p(n,"PRE",{class:!0});var Fa=c(L);Fa.forEach(a),kn=f(n),G=p(n,"P",{});var oa=c(G);Mn=u(oa,"Again, we separate our concerns. One function for the logic of deciding whether a leaf satisfies a filter, one function for counting up over leaves, and one function for finding the leaves we want to traverse over. Each individual function is easy to describe and therefore easy to test. Even better, they give us a vocabulary that makes their composition easy to describe; \u201Ccount the items under each leaf in the tree that satisfies the filter\u201D. Initially, setting the level in the filter to be the empty array might seem like a wart (and maybe it is, you can have your own aesthetic preferences). But it also has a nice clean interpretation; \u201Cwhen breaking down by level, pretend like there isn\u2019t a level filter.\u201D"),oa.forEach(a),fn=f(n),M=p(n,"P",{});var pa=c(M);S=p(pa,"A",{href:!0,rel:!0});var ca=c(S);On=u(ca,"Typechecked playground demonstrating the code in this article"),ca.forEach(a),pa.forEach(a),this.h()},h(){g(w,"class","language-ts"),g(T,"class","language-ts"),g(E,"class","language-ts"),g(B,"class","language-ts"),g(F,"class","language-ts"),g(_,"class","language-ts"),g(x,"class","language-ts"),g(C,"class","language-tsx"),g(L,"class","language-ts"),g(S,"href","https://www.typescriptlang.org/play?ssl=133&ssc=2&pln=105&pc=1#code/PTAEHcAsEMBdQJYGdTVAM2gYwKawPwBQsAngA46gDCA9gHaw4MAq5lAvKAEQBuCAJjhq0ArgCckOLqAA+3BAxxjssBDxyiJU2dzJiaAKxxZYXYm1AAZHOoA2oTlwBGOAOYK6S6XK4LGYgFscfgQ4bR9ofh5oOlx+M1IKUGYEIIAxZSCHbltoJFgAZQQADwBZelhIJG8cvNgATRxoMRquGltBFsJzJIBRJABBV1cxNzgEemyAb1Rh0ddx+iQALlAZwgBILAqmWFYKVanCUBPTk6cRLABrPBW147PHk5uSVdpFFjYHp7PbGxxbHcjj8QaALtdbodvqCQS9VtY7NCYU9VOlMjgocisWDLjdYECkdiYXDkqkcBloEEADSEokg-g0LAAfW2IgYqzoIgCLjEtLpJwAvgBtAC6fKxAvFP2FYolfJl0MlAslPUo1mg6GmD22Hz2bDeO0+FBpJz+dnh-1sJtAqPJ6NWKTRlJw2pobNgHK5PMIKp1+QwuVgjDo2QAFJsptA5mNVEtDjrg3qDmtwXi7iYAEK427KgWrfpDEYxiZ0QgASgtGtFDgAfKBM9n8QA6Ub8S44AA86vQoprofDW1g3aQVNAEZJCd2+xwo7NAKBqchoDntizEPxyvLteXlrXaZbwXb-c2K+HNI2UxJK9HtopQUOi-xq1te5zkrL25fjaQB7buGPZy2me0KXjgrw2mSd4zqADLMqy7L1m6DDvtuQrQk2GFAU06AjiBk5GtB14QU61KIe6koirOlrDmWhCjiYNF0aAoq0aqoAAEqHrgYgdswdacAO+RhA6o4nthlboFu7B1sw3QgKAAASNDgDBNAQJQZAiPAlSUK27ZiIgIaVHAiGKMUBCEH68B6bg2S8VSfYRlGRYLLGdBAvhSYYim36rA265ILm+aDNGrklueNlKKsnF-kovE1ueCgIKo0C2AUsDCck5YOtu-n7pF8XHoO6VhKJF4ToaXlUXYC6+TudivhuKHSfVAKNT+kVFSuJWMOeoHgURt72j5AXPmS7Wbh+LVfgFv5HuGgFkj1M4gSSQ3OqOsEskhHpkchUl1pFYihray2jlM62kURnnTvRO0CmW1UAsttH0YUGWMK9hnJaEaUfTgrFWQGcDBkM0AKGGznBYW8yLHQFZWNh1YtQV3a9gOznnqGfwaiOO4alNdZoRsGwYU2OM4eeGwU5slGbKK5bdIklCiAwSAZiQvGgDg5lMPwKD5GICiuPxaxCi8hnJCKnrckoKqWUs8DwfiHOOhwoChlDoAFqFcMI6zKuc2rUH8YdXE4BjwxY8rSAFDQaTNOdl3QcrD3bqGRwk2TNt2w7YhU0KzvS3t+K+80geQeiIqgAA1CHmwPX1uT5EUZQVFUqwAAyznUjTNFno7tJ0Wfvt0QM2xzCIApDwzQ7rbn6zt7Oc1Xtim6AnWbJjmyhj79uO2sg2RxtIduy1J3D1k7DT6AADkRdKLPY4k-g9wk6TGF937VMbEKK7B1v4f77H8ckwKy8bH5Tdh2Ij0Ri47h0J4YgF4Z-hBCEmXZ6gUQxHEJeMzYmkBAth-Bai2JVacBpdTTgZtTS0Fo7BwOdg6SeOAGaSiBgoYBoClBhgjDdNgT0rTETtM6PMiMNRlXQCA-wqwcH+GymCGg7QmghnHj3GhuCxBNkIRQcmTBXCVAcDPTOsg5BcP8LwyBbAmwKCwLYEQggkC9xkRQMsH4ABkmjOG0KUAIuwAi6BCMgCIzgYiZASL0TwlccjYiKOUdjS0GjQDaN0dwpszsjEmLMaACxViPFePkQ4nAKjnYaMAUDSRShggG2bq3fBGwtY6xcnDah1j6HWKYXEjmXZLTt07kkq2PdD7+3xugQmGtNgbGwdYpxVC1hk2iWUlcqxRQPWqavT2XtN7X37v7apu8KYGIBAfPpfs97YRGbYaOcdhnK2qZKEmV93S236ZsO+F4H4eCin40cfglAf1CIwV+kRoixGCAAssQA"),g(S,"rel","nofollow")},m(n,s){t(n,r,s),e(r,v),t(n,y,s),t(n,w,s),w.innerHTML=h,t(n,d,s),t(n,b,s),e(b,mn),t(n,z,s),t(n,T,s),T.innerHTML=ra,t(n,V,s),t(n,P,s),e(P,dn),t(n,Z,s),t(n,E,s),E.innerHTML=ia,t(n,X,s),t(n,Y,s),e(Y,wn),t(n,$,s),t(n,B,s),B.innerHTML=ka,t(n,nn,s),t(n,i,s),e(i,gn),e(i,O),e(O,vn),e(i,yn),e(i,I),e(I,bn),e(i,An),e(i,R),e(R,Tn),e(i,En),e(i,W),e(W,Bn),e(i,Fn),e(i,q),e(q,_n),e(i,xn),e(i,U),e(U,Cn),e(i,Ln),e(i,J),e(J,Sn),e(i,Kn),t(n,an,s),t(n,D,s),e(D,Pn),t(n,sn,s),t(n,F,s),F.innerHTML=fa,t(n,tn,s),t(n,Q,s),e(Q,Yn),t(n,en,s),t(n,_,s),_.innerHTML=ha,t(n,on,s),t(n,A,s),e(A,Dn),e(A,N),e(N,Qn),e(A,Hn),t(n,pn,s),t(n,x,s),x.innerHTML=ma,t(n,cn,s),t(n,H,s),e(H,jn),t(n,ln,s),t(n,C,s),C.innerHTML=da,t(n,un,s),t(n,j,s),e(j,Gn),t(n,rn,s),t(n,L,s),L.innerHTML=wa,t(n,kn,s),t(n,G,s),e(G,Mn),t(n,fn,s),t(n,M,s),e(M,S),e(S,On)},p:Ha,d(n){n&&a(r),n&&a(y),n&&a(w),n&&a(d),n&&a(b),n&&a(z),n&&a(T),n&&a(V),n&&a(P),n&&a(Z),n&&a(E),n&&a(X),n&&a(Y),n&&a($),n&&a(B),n&&a(nn),n&&a(i),n&&a(an),n&&a(D),n&&a(sn),n&&a(F),n&&a(tn),n&&a(Q),n&&a(en),n&&a(_),n&&a(on),n&&a(A),n&&a(pn),n&&a(x),n&&a(cn),n&&a(H),n&&a(ln),n&&a(C),n&&a(un),n&&a(j),n&&a(rn),n&&a(L),n&&a(kn),n&&a(G),n&&a(fn),n&&a(M)}}}function Ma(K){let r,v;const y=[K[0],Rn];let w={$$slots:{default:[Ga]},$$scope:{ctx:K}};for(let h=0;h<y.length;h+=1)w=In(w,y[h]);return r=new ja({props:w}),{c(){La(r.$$.fragment)},l(h){Sa(r.$$.fragment,h)},m(h,d){Ka(r,h,d),v=!0},p(h,[d]){const b=d&1?Pa(y,[d&1&&la(h[0]),d&0&&la(Rn)]):{};d&2&&(b.$$scope={dirty:d,ctx:h}),r.$set(b)},i(h){v||(Ya(r.$$.fragment,h),v=!0)},o(h){Da(r.$$.fragment,h),v=!1},d(h){Qa(r,h)}}}const Rn={title:"Tree Traversals in Typescript",date:"2021-04-20T00:00:00.000Z",status:"published",blurb:"In a search engine, we might want to be able to slice and dice the search results that came back by three different facets; by content type, by content level, and by timeframe."};function Oa(K,r,v){return K.$$set=y=>{v(0,r=In(In({},r),ua(y)))},r=ua(r),[r]}class Ia extends _a{constructor(r){super();xa(this,r,Oa,Ma,Ca,{})}}export default Ia;export{Rn as metadata};
