import{S as Ks,i as Qs,s as Vs,w as Hn,a as Xs,d as Ys,m as eo,x as to,y as Bs,n as ao,t as no,o as so,z as $s,q as o,A as n,b as u,r as l,B as p,C as s,g as a,f,u as m,j as r,k as t,p as oo}from"./index-58f43e7f.js";import{B as lo}from"./blog-d7f7866c.js";function po(V){let c,D,_,B,h,v,X,St,$,At,Ht,he,Wt,Lt,ke,gt,Bt,Xe,Y,$t,Ye,M,ye,jt,zt,ve,Rt,et,ee,Ft,tt,te,Nt,at,j,zs=`<code class="language-rust"><span class="token keyword">trait</span> <span class="token type-definition class-name">Monoid</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span>

  <span class="token keyword">fn</span> <span class="token function-definition function">append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span>
<span class="token punctuation">&#125;</span></code>`,nt,ae,Ut,st,z,Rs=`<code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">T_is_a_monoid</span><span class="token punctuation">(</span>example<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">::</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> example<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">::</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">,</span> example<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ot,I,Zt,we,Gt,Jt,_e,Kt,Qt,lt,d,Vt,Ee,Xt,Yt,be,ea,ta,Te,aa,na,De,sa,oa,Ie,la,pa,Ce,ia,ra,Oe,ca,ua,Pe,fa,da,pt,y,ma,qe,ha,ka,xe,ya,va,Me,wa,_a,Se,Ea,ba,Ae,Ta,Da,it,ne,R,Ia,F,Ca,Oa,rt,se,Pa,ct,oe,T,qa,N,xa,Ma,U,Sa,Aa,Z,Ha,Wa,ut,le,La,ft,G,Fs=`<code class="language-rust"><span class="token keyword">trait</span> <span class="token type-definition class-name">MyTrait</span> <span class="token punctuation">&#123;</span>
  <span class="token function">my_trait_func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">ReturnType</span>
<span class="token punctuation">&#125;</span></code>`,dt,w,ga,He,Ba,$a,We,ja,za,Le,Ra,Fa,ge,Na,Ua,mt,S,Za,Be,Ga,Ja,ht,J,Ns=`<code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">impl_struct</span><span class="token punctuation">(</span> <span class="token comment">// arguments correspond to our assumptions.</span>
  input<span class="token punctuation">:</span> <span class="token class-name">DeriveInput</span><span class="token punctuation">,</span> <span class="token comment">// we have some struct</span>
  trait_name<span class="token punctuation">:</span> <span class="token class-name">Ident</span><span class="token punctuation">,</span> <span class="token comment">// that we want to derive a trait on.</span>
  trait_func_name<span class="token punctuation">:</span> <span class="token class-name">Ident</span><span class="token punctuation">,</span> <span class="token comment">// that trait can be implemented with one function.</span>
  return_type<span class="token punctuation">:</span> <span class="token class-name">Ident</span> <span class="token comment">// that function has some return type with monoidal structure</span>
<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">TokenStream</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> struct_name <span class="token operator">=</span> input<span class="token punctuation">.</span>ident<span class="token punctuation">;</span>
  <span class="token keyword">let</span> struct_fields <span class="token operator">=</span> <span class="token keyword">match</span> input<span class="token punctuation">.</span>data <span class="token punctuation">&#123;</span>
    <span class="token class-name">Data</span><span class="token punctuation">::</span><span class="token class-name">Struct</span><span class="token punctuation">(</span><span class="token class-name">DataStruct</span> <span class="token punctuation">&#123;</span>
      fields<span class="token punctuation">:</span> <span class="token class-name">Fields</span><span class="token punctuation">::</span><span class="token class-name">Named</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">..</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> fields<span class="token punctuation">.</span>named<span class="token punctuation">,</span>
    _ <span class="token operator">=></span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">"not a struct"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> empty_value <span class="token operator">=</span> <span class="token macro property">quote!</span><span class="token punctuation">&#123;</span> #<span class="token namespace">return_type<span class="token punctuation">::</span></span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> trait_func_impl <span class="token operator">=</span> fields
  <span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>field<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span> <span class="token comment">// for each field</span>
    <span class="token keyword">let</span> field_name <span class="token operator">=</span> field<span class="token punctuation">.</span>ident<span class="token punctuation">;</span>
    <span class="token macro property">quote!</span><span class="token punctuation">&#123;</span>#field_name<span class="token punctuation">.</span>#<span class="token function">trait_func_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token comment">// apply the trait function to get some instance of #return_type</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span>empty_value<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>accumulated_code<span class="token punctuation">,</span> field_result<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span> <span class="token comment">// then combine the results</span>
    <span class="token macro property">quote!</span><span class="token punctuation">&#123;</span>#<span class="token namespace">return_type<span class="token punctuation">::</span></span><span class="token function">append</span><span class="token punctuation">(</span>#accumulated_code<span class="token punctuation">,</span> #field_result<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token comment">// using the binary function from the monoid over #return_type</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token macro property">quote!</span><span class="token punctuation">&#123;</span>
    <span class="token attribute attr-name">#[automatically_derived]</span>
    <span class="token keyword">impl</span> #trait_name <span class="token keyword">for</span> #struct_name <span class="token punctuation">&#123;</span>
      <span class="token keyword">fn</span> #<span class="token function">trait_func_name</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> #return_type <span class="token punctuation">&#123;</span>
        #trait_func_impl
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,kt,pe,x,Ka,$e,Qa,Va,je,Xa,Ya,yt,A,en,ze,tn,an,vt,E,nn,Re,sn,on,Fe,ln,pn,Ne,rn,cn,wt,C,un,Ue,fn,dn,Ze,mn,hn,_t,H,kn,Ge,yn,vn,Et,ie,wn,bt,re,_n,Tt,W,Je,En,bn,Ke,Tn,Dt,O,Dn,K,In,Cn,Qe,On,Pn,It,P,qn,Ve,xn,Mn,Q,Sn,An;return{c(){c=o("p"),D=n("Custom derive macros are used in a variety of rust libraries ("),_=o("a"),B=n("serde"),h=n(", "),v=o("a"),X=n("argh"),St=n(", and of course "),$=o("a"),At=n("sedk"),Ht=n(") to make it easy and obvious to implement some trait for structs and/or enums as long as all of the fields in that struct or enum implement the trait. Built in derives also tend to follow this pattern. We know that there is an obvious definition of "),he=o("code"),Wt=n("PartialEq"),Lt=n(" for a struct as long as there is a definition of "),ke=o("code"),gt=n("PartialEq"),Bt=n(" for each field; two structs are equal all of their fields are equal."),Xe=u(),Y=o("p"),$t=n("There is a more general pattern here. given any product type (struct) and a trait that can be implemented with a single function, we can come up with an easy implementation of a trait as long as:"),Ye=u(),M=o("ul"),ye=o("li"),jt=n("All fields in the type implement the trait"),zt=u(),ve=o("li"),Rt=n("the return type of the trait function has monoidal structure"),et=u(),ee=o("h2"),Ft=n("Monoidal Structure?"),tt=u(),te=o("p"),Nt=n("A monoid is a certain sort of structure that a type can have. We can sketch it with a trait."),at=u(),j=o("pre"),nt=u(),ae=o("p"),Ut=n("However, to truly be a monoid, implementing types would have to satisfy a few more restructions."),st=u(),z=o("pre"),ot=u(),I=o("p"),Zt=n("If we could run this test on every possible instance of the type "),we=o("code"),Gt=n("T"),Jt=n(", and it passed for all of them, we would have proven that "),_e=o("code"),Kt=n("T"),Qt=n(" is a monoid."),lt=u(),d=o("p"),Vt=n("Monoids are neat and come up frequently. Addition and multiplication are both monoids over numbers, with "),Ee=o("code"),Xt=n("0"),Yt=n(" and "),be=o("code"),ea=n("1"),ta=n(" as the return values of "),Te=o("code"),aa=n("empty"),na=n(" respectively. String concatenation is a monoid, with the empty string as the "),De=o("code"),sa=n("empty"),oa=n(" value. Booleans have two monoids; "),Ie=o("code"),la=n("and"),pa=n(" is a monoid with an empty value of "),Ce=o("code"),ia=n("true"),ra=n(", and "),Oe=o("code"),ca=n("or"),ua=n(" is a monoid with an empty value of "),Pe=o("code"),fa=n("false"),da=n("."),pt=u(),y=o("p"),ma=n("We need a monoid so that we can combine together the result of applying the trait function to each individual field into a single value for the whole struct. In the context of "),qe=o("code"),ha=n("PartialEq"),ka=n(", our derived implementation uses "),xe=o("code"),ya=n("and"),va=n(" as it’s monoid; that is, the "),Me=o("code"),wa=n("eq"),_a=n(" function returns true if the "),Se=o("code"),Ea=n("eq"),ba=n(" comparison applied to "),Ae=o("em"),Ta=n("every"),Da=n(" field returns true."),it=u(),ne=o("p"),R=o("em"),Ia=n("For a more in depth explanation of what a monoid is, read "),F=o("a"),Ca=n("Bartosz Milewski’s"),Oa=n(" excellent series on category theory for programmers."),rt=u(),se=o("h2"),Pa=n("Derivation for Structs"),ct=u(),oe=o("p"),T=o("em"),qa=n("If you haven’t worked with derive macros before, I highly recommend "),N=o("a"),xa=n("this blog post"),Ma=n(" for a quick explanation and "),U=o("a"),Sa=n("this repo"),Aa=n(" for a more in depth walkthrough. The "),Z=o("a"),Ha=n("syn documentation"),Wa=n(" is also quite useful."),ut=u(),le=o("p"),La=n("Lets say I have some trait."),ft=u(),G=o("pre"),dt=u(),w=o("p"),ga=n("There are implementations of "),He=o("code"),Ba=n("MyTrait"),$a=n(" for a variety of different things that we’ll call “primitives” in the sense that they implement "),We=o("code"),ja=n("MyTrait"),za=n(" by hand. What we want is to come up with some obvious implementation of "),Le=o("code"),Ra=n("MyTrait"),Fa=n(" for any struct or enum made up of "),ge=o("code"),Na=n("impl MyTrait"),Ua=n(" fields."),mt=u(),S=o("p"),Za=n("Structs are easy. We’ve said that all of our fields must implement the trait. Then we just need to apply our monoidal function to the result, and a single object of type "),Be=o("code"),Ga=n("ReturnType"),Ja=n(" falls out. voila, we have our implementation."),ht=u(),J=o("pre"),kt=u(),pe=o("p"),x=o("em"),Ka=n("Notice that when we run a fold in the macro, the produced code will simply nest this statement repeatedly; "),$e=o("code"),Qa=n("monoid(monoid(monoid(empty, a), b), c)"),Va=n(". We use the empty value so we don’t have to worry about whether the struct actually has fields; an empty struct would just return "),je=o("code"),Xa=n("#return_type::empty()"),Ya=n("."),yt=u(),A=o("p"),en=n("This will give us a working implementation of our trait. It might not be the implementation we want; maybe we don’t care about every field, or need to consider fields in different ways. In fact, given this monoidal structure, there is a much simpler implementation that always works for any type; simply returning "),ze=o("code"),tn=n("#return_type::empty()"),an=n("."),vt=u(),E=o("p"),nn=n("This implementation seems nicer than that to me, because it considers each field in a uniform way, and because it nicely captures the core of what things like serde and argh are doing with their derive macros. In fact, if we generalize this to support helper attributes which could replace "),Re=o("code"),sn=n("#trait_func_name"),on=n(" with some arbitrary other function on "),Fe=o("code"),ln=n("#field_name"),pn=n(" that could produce a "),Ne=o("code"),rn=n("#return_type"),cn=n(", this becomes much more flexible and could be useful in a variety of settings."),wt=u(),C=o("h2"),un=n("What if "),Ue=o("code"),fn=n("#return_type"),dn=n(" is "),Ze=o("code"),mn=n("Self"),hn=n("?"),_t=u(),H=o("p"),kn=n("This doesn’t work as well, because "),Ge=o("code"),yn=n("Self"),vn=n(" means different things for each field and for the struct as a whole. However, if we look at the places where derive macros are common, they don’t tend to have polymorphic return types. Instead they go to some consistent type with monoidal structure."),Et=u(),ie=o("h2"),wn=n("What about enums?"),bt=u(),re=o("p"),_n=n("In the enum case, we can do the same thing for each branch independently. As long as each variant could be derived in a way similar to above, we can derive the implementation for the enum to be"),Tt=u(),W=o("ul"),Je=o("li"),En=n("a pattern match against the enum"),bn=u(),Ke=o("li"),Tn=n("a natural implementation for the context of each branch"),Dt=u(),O=o("p"),Dn=n("However, I am less confident that the “natural” implementation I describe there is useful in the enum case. I think in general that you do want some way to consider the context of which branch you are under. For instance, Serde has a "),K=o("a"),In=n("variety of ways"),Cn=n(" that you can represent enums, and two of the three involve considering at least the "),Qe=o("em"),On=n("name"),Pn=n(" of the variant."),It=u(),P=o("p"),qn=n("Similar to the potential generalization of the struct approach, the enum version could be "),Ve=o("em"),xn=n("much"),Mn=n(" more useful with the addition of helper macros. Then each branch could be processed with a different monoid, and individual fields could be processed differently as above. However, that’s way too much code to put in a blog post. I’m not "),Q=o("a"),Sn=n("Amos"),An=n("."),this.h()},l(e){c=l(e,"P",{});var i=p(c);D=s(i,"Custom derive macros are used in a variety of rust libraries ("),_=l(i,"A",{href:!0,rel:!0});var Wn=p(_);B=s(Wn,"serde"),Wn.forEach(a),h=s(i,", "),v=l(i,"A",{href:!0,rel:!0});var Ln=p(v);X=s(Ln,"argh"),Ln.forEach(a),St=s(i,", and of course "),$=l(i,"A",{href:!0,rel:!0});var gn=p($);At=s(gn,"sedk"),gn.forEach(a),Ht=s(i,") to make it easy and obvious to implement some trait for structs and/or enums as long as all of the fields in that struct or enum implement the trait. Built in derives also tend to follow this pattern. We know that there is an obvious definition of "),he=l(i,"CODE",{});var Bn=p(he);Wt=s(Bn,"PartialEq"),Bn.forEach(a),Lt=s(i," for a struct as long as there is a definition of "),ke=l(i,"CODE",{});var $n=p(ke);gt=s($n,"PartialEq"),$n.forEach(a),Bt=s(i," for each field; two structs are equal all of their fields are equal."),i.forEach(a),Xe=f(e),Y=l(e,"P",{});var jn=p(Y);$t=s(jn,"There is a more general pattern here. given any product type (struct) and a trait that can be implemented with a single function, we can come up with an easy implementation of a trait as long as:"),jn.forEach(a),Ye=f(e),M=l(e,"UL",{});var Ct=p(M);ye=l(Ct,"LI",{});var zn=p(ye);jt=s(zn,"All fields in the type implement the trait"),zn.forEach(a),zt=f(Ct),ve=l(Ct,"LI",{});var Rn=p(ve);Rt=s(Rn,"the return type of the trait function has monoidal structure"),Rn.forEach(a),Ct.forEach(a),et=f(e),ee=l(e,"H2",{});var Fn=p(ee);Ft=s(Fn,"Monoidal Structure?"),Fn.forEach(a),tt=f(e),te=l(e,"P",{});var Nn=p(te);Nt=s(Nn,"A monoid is a certain sort of structure that a type can have. We can sketch it with a trait."),Nn.forEach(a),at=f(e),j=l(e,"PRE",{class:!0});var Us=p(j);Us.forEach(a),nt=f(e),ae=l(e,"P",{});var Un=p(ae);Ut=s(Un,"However, to truly be a monoid, implementing types would have to satisfy a few more restructions."),Un.forEach(a),st=f(e),z=l(e,"PRE",{class:!0});var Zs=p(z);Zs.forEach(a),ot=f(e),I=l(e,"P",{});var ce=p(I);Zt=s(ce,"If we could run this test on every possible instance of the type "),we=l(ce,"CODE",{});var Zn=p(we);Gt=s(Zn,"T"),Zn.forEach(a),Jt=s(ce,", and it passed for all of them, we would have proven that "),_e=l(ce,"CODE",{});var Gn=p(_e);Kt=s(Gn,"T"),Gn.forEach(a),Qt=s(ce," is a monoid."),ce.forEach(a),lt=f(e),d=l(e,"P",{});var k=p(d);Vt=s(k,"Monoids are neat and come up frequently. Addition and multiplication are both monoids over numbers, with "),Ee=l(k,"CODE",{});var Jn=p(Ee);Xt=s(Jn,"0"),Jn.forEach(a),Yt=s(k," and "),be=l(k,"CODE",{});var Kn=p(be);ea=s(Kn,"1"),Kn.forEach(a),ta=s(k," as the return values of "),Te=l(k,"CODE",{});var Qn=p(Te);aa=s(Qn,"empty"),Qn.forEach(a),na=s(k," respectively. String concatenation is a monoid, with the empty string as the "),De=l(k,"CODE",{});var Vn=p(De);sa=s(Vn,"empty"),Vn.forEach(a),oa=s(k," value. Booleans have two monoids; "),Ie=l(k,"CODE",{});var Xn=p(Ie);la=s(Xn,"and"),Xn.forEach(a),pa=s(k," is a monoid with an empty value of "),Ce=l(k,"CODE",{});var Yn=p(Ce);ia=s(Yn,"true"),Yn.forEach(a),ra=s(k,", and "),Oe=l(k,"CODE",{});var es=p(Oe);ca=s(es,"or"),es.forEach(a),ua=s(k," is a monoid with an empty value of "),Pe=l(k,"CODE",{});var ts=p(Pe);fa=s(ts,"false"),ts.forEach(a),da=s(k,"."),k.forEach(a),pt=f(e),y=l(e,"P",{});var b=p(y);ma=s(b,"We need a monoid so that we can combine together the result of applying the trait function to each individual field into a single value for the whole struct. In the context of "),qe=l(b,"CODE",{});var as=p(qe);ha=s(as,"PartialEq"),as.forEach(a),ka=s(b,", our derived implementation uses "),xe=l(b,"CODE",{});var ns=p(xe);ya=s(ns,"and"),ns.forEach(a),va=s(b," as it’s monoid; that is, the "),Me=l(b,"CODE",{});var ss=p(Me);wa=s(ss,"eq"),ss.forEach(a),_a=s(b," function returns true if the "),Se=l(b,"CODE",{});var os=p(Se);Ea=s(os,"eq"),os.forEach(a),ba=s(b," comparison applied to "),Ae=l(b,"EM",{});var ls=p(Ae);Ta=s(ls,"every"),ls.forEach(a),Da=s(b," field returns true."),b.forEach(a),it=f(e),ne=l(e,"P",{});var ps=p(ne);R=l(ps,"EM",{});var Ot=p(R);Ia=s(Ot,"For a more in depth explanation of what a monoid is, read "),F=l(Ot,"A",{href:!0,rel:!0});var is=p(F);Ca=s(is,"Bartosz Milewski’s"),is.forEach(a),Oa=s(Ot," excellent series on category theory for programmers."),Ot.forEach(a),ps.forEach(a),rt=f(e),se=l(e,"H2",{});var rs=p(se);Pa=s(rs,"Derivation for Structs"),rs.forEach(a),ct=f(e),oe=l(e,"P",{});var cs=p(oe);T=l(cs,"EM",{});var L=p(T);qa=s(L,"If you haven’t worked with derive macros before, I highly recommend "),N=l(L,"A",{href:!0,rel:!0});var us=p(N);xa=s(us,"this blog post"),us.forEach(a),Ma=s(L," for a quick explanation and "),U=l(L,"A",{href:!0,rel:!0});var fs=p(U);Sa=s(fs,"this repo"),fs.forEach(a),Aa=s(L," for a more in depth walkthrough. The "),Z=l(L,"A",{href:!0,rel:!0});var ds=p(Z);Ha=s(ds,"syn documentation"),ds.forEach(a),Wa=s(L," is also quite useful."),L.forEach(a),cs.forEach(a),ut=f(e),le=l(e,"P",{});var ms=p(le);La=s(ms,"Lets say I have some trait."),ms.forEach(a),ft=f(e),G=l(e,"PRE",{class:!0});var Gs=p(G);Gs.forEach(a),dt=f(e),w=l(e,"P",{});var q=p(w);ga=s(q,"There are implementations of "),He=l(q,"CODE",{});var hs=p(He);Ba=s(hs,"MyTrait"),hs.forEach(a),$a=s(q," for a variety of different things that we’ll call “primitives” in the sense that they implement "),We=l(q,"CODE",{});var ks=p(We);ja=s(ks,"MyTrait"),ks.forEach(a),za=s(q," by hand. What we want is to come up with some obvious implementation of "),Le=l(q,"CODE",{});var ys=p(Le);Ra=s(ys,"MyTrait"),ys.forEach(a),Fa=s(q," for any struct or enum made up of "),ge=l(q,"CODE",{});var vs=p(ge);Na=s(vs,"impl MyTrait"),vs.forEach(a),Ua=s(q," fields."),q.forEach(a),mt=f(e),S=l(e,"P",{});var Pt=p(S);Za=s(Pt,"Structs are easy. We’ve said that all of our fields must implement the trait. Then we just need to apply our monoidal function to the result, and a single object of type "),Be=l(Pt,"CODE",{});var ws=p(Be);Ga=s(ws,"ReturnType"),ws.forEach(a),Ja=s(Pt," falls out. voila, we have our implementation."),Pt.forEach(a),ht=f(e),J=l(e,"PRE",{class:!0});var Js=p(J);Js.forEach(a),kt=f(e),pe=l(e,"P",{});var _s=p(pe);x=l(_s,"EM",{});var ue=p(x);Ka=s(ue,"Notice that when we run a fold in the macro, the produced code will simply nest this statement repeatedly; "),$e=l(ue,"CODE",{});var Es=p($e);Qa=s(Es,"monoid(monoid(monoid(empty, a), b), c)"),Es.forEach(a),Va=s(ue,". We use the empty value so we don’t have to worry about whether the struct actually has fields; an empty struct would just return "),je=l(ue,"CODE",{});var bs=p(je);Xa=s(bs,"#return_type::empty()"),bs.forEach(a),Ya=s(ue,"."),ue.forEach(a),_s.forEach(a),yt=f(e),A=l(e,"P",{});var qt=p(A);en=s(qt,"This will give us a working implementation of our trait. It might not be the implementation we want; maybe we don’t care about every field, or need to consider fields in different ways. In fact, given this monoidal structure, there is a much simpler implementation that always works for any type; simply returning "),ze=l(qt,"CODE",{});var Ts=p(ze);tn=s(Ts,"#return_type::empty()"),Ts.forEach(a),an=s(qt,"."),qt.forEach(a),vt=f(e),E=l(e,"P",{});var g=p(E);nn=s(g,"This implementation seems nicer than that to me, because it considers each field in a uniform way, and because it nicely captures the core of what things like serde and argh are doing with their derive macros. In fact, if we generalize this to support helper attributes which could replace "),Re=l(g,"CODE",{});var Ds=p(Re);sn=s(Ds,"#trait_func_name"),Ds.forEach(a),on=s(g," with some arbitrary other function on "),Fe=l(g,"CODE",{});var Is=p(Fe);ln=s(Is,"#field_name"),Is.forEach(a),pn=s(g," that could produce a "),Ne=l(g,"CODE",{});var Cs=p(Ne);rn=s(Cs,"#return_type"),Cs.forEach(a),cn=s(g,", this becomes much more flexible and could be useful in a variety of settings."),g.forEach(a),wt=f(e),C=l(e,"H2",{});var fe=p(C);un=s(fe,"What if "),Ue=l(fe,"CODE",{});var Os=p(Ue);fn=s(Os,"#return_type"),Os.forEach(a),dn=s(fe," is "),Ze=l(fe,"CODE",{});var Ps=p(Ze);mn=s(Ps,"Self"),Ps.forEach(a),hn=s(fe,"?"),fe.forEach(a),_t=f(e),H=l(e,"P",{});var xt=p(H);kn=s(xt,"This doesn’t work as well, because "),Ge=l(xt,"CODE",{});var qs=p(Ge);yn=s(qs,"Self"),qs.forEach(a),vn=s(xt," means different things for each field and for the struct as a whole. However, if we look at the places where derive macros are common, they don’t tend to have polymorphic return types. Instead they go to some consistent type with monoidal structure."),xt.forEach(a),Et=f(e),ie=l(e,"H2",{});var xs=p(ie);wn=s(xs,"What about enums?"),xs.forEach(a),bt=f(e),re=l(e,"P",{});var Ms=p(re);_n=s(Ms,"In the enum case, we can do the same thing for each branch independently. As long as each variant could be derived in a way similar to above, we can derive the implementation for the enum to be"),Ms.forEach(a),Tt=f(e),W=l(e,"UL",{});var Mt=p(W);Je=l(Mt,"LI",{});var Ss=p(Je);En=s(Ss,"a pattern match against the enum"),Ss.forEach(a),bn=f(Mt),Ke=l(Mt,"LI",{});var As=p(Ke);Tn=s(As,"a natural implementation for the context of each branch"),As.forEach(a),Mt.forEach(a),Dt=f(e),O=l(e,"P",{});var de=p(O);Dn=s(de,"However, I am less confident that the “natural” implementation I describe there is useful in the enum case. I think in general that you do want some way to consider the context of which branch you are under. For instance, Serde has a "),K=l(de,"A",{href:!0,rel:!0});var Hs=p(K);In=s(Hs,"variety of ways"),Hs.forEach(a),Cn=s(de," that you can represent enums, and two of the three involve considering at least the "),Qe=l(de,"EM",{});var Ws=p(Qe);On=s(Ws,"name"),Ws.forEach(a),Pn=s(de," of the variant."),de.forEach(a),It=f(e),P=l(e,"P",{});var me=p(P);qn=s(me,"Similar to the potential generalization of the struct approach, the enum version could be "),Ve=l(me,"EM",{});var Ls=p(Ve);xn=s(Ls,"much"),Ls.forEach(a),Mn=s(me," more useful with the addition of helper macros. Then each branch could be processed with a different monoid, and individual fields could be processed differently as above. However, that’s way too much code to put in a blog post. I’m not "),Q=l(me,"A",{href:!0,rel:!0});var gs=p(Q);Sn=s(gs,"Amos"),gs.forEach(a),An=s(me,"."),me.forEach(a),this.h()},h(){m(_,"href","https://serde.rs/"),m(_,"rel","nofollow"),m(v,"href","https://github.com/google/argh"),m(v,"rel","nofollow"),m($,"href","https://github.com/schicks/sedk"),m($,"rel","nofollow"),m(j,"class","language-rust"),m(z,"class","language-rust"),m(F,"href","https://bartoszmilewski.com/2015/07/21/free-monoids/"),m(F,"rel","nofollow"),m(N,"href","https://blog.turbo.fish/proc-macro-simple-derive/"),m(N,"rel","nofollow"),m(U,"href","https://github.com/dtolnay/proc-macro-workshop"),m(U,"rel","nofollow"),m(Z,"href","https://docs.rs/syn/0.15.26/syn/"),m(Z,"rel","nofollow"),m(G,"class","language-rust"),m(J,"class","language-rust"),m(K,"href","https://serde.rs/enum-representations.html"),m(K,"rel","nofollow"),m(Q,"href","https://fasterthanli.me/articles/getting-in-and-out-of-trouble-with-rust-futures"),m(Q,"rel","nofollow")},m(e,i){r(e,c,i),t(c,D),t(c,_),t(_,B),t(c,h),t(c,v),t(v,X),t(c,St),t(c,$),t($,At),t(c,Ht),t(c,he),t(he,Wt),t(c,Lt),t(c,ke),t(ke,gt),t(c,Bt),r(e,Xe,i),r(e,Y,i),t(Y,$t),r(e,Ye,i),r(e,M,i),t(M,ye),t(ye,jt),t(M,zt),t(M,ve),t(ve,Rt),r(e,et,i),r(e,ee,i),t(ee,Ft),r(e,tt,i),r(e,te,i),t(te,Nt),r(e,at,i),r(e,j,i),j.innerHTML=zs,r(e,nt,i),r(e,ae,i),t(ae,Ut),r(e,st,i),r(e,z,i),z.innerHTML=Rs,r(e,ot,i),r(e,I,i),t(I,Zt),t(I,we),t(we,Gt),t(I,Jt),t(I,_e),t(_e,Kt),t(I,Qt),r(e,lt,i),r(e,d,i),t(d,Vt),t(d,Ee),t(Ee,Xt),t(d,Yt),t(d,be),t(be,ea),t(d,ta),t(d,Te),t(Te,aa),t(d,na),t(d,De),t(De,sa),t(d,oa),t(d,Ie),t(Ie,la),t(d,pa),t(d,Ce),t(Ce,ia),t(d,ra),t(d,Oe),t(Oe,ca),t(d,ua),t(d,Pe),t(Pe,fa),t(d,da),r(e,pt,i),r(e,y,i),t(y,ma),t(y,qe),t(qe,ha),t(y,ka),t(y,xe),t(xe,ya),t(y,va),t(y,Me),t(Me,wa),t(y,_a),t(y,Se),t(Se,Ea),t(y,ba),t(y,Ae),t(Ae,Ta),t(y,Da),r(e,it,i),r(e,ne,i),t(ne,R),t(R,Ia),t(R,F),t(F,Ca),t(R,Oa),r(e,rt,i),r(e,se,i),t(se,Pa),r(e,ct,i),r(e,oe,i),t(oe,T),t(T,qa),t(T,N),t(N,xa),t(T,Ma),t(T,U),t(U,Sa),t(T,Aa),t(T,Z),t(Z,Ha),t(T,Wa),r(e,ut,i),r(e,le,i),t(le,La),r(e,ft,i),r(e,G,i),G.innerHTML=Fs,r(e,dt,i),r(e,w,i),t(w,ga),t(w,He),t(He,Ba),t(w,$a),t(w,We),t(We,ja),t(w,za),t(w,Le),t(Le,Ra),t(w,Fa),t(w,ge),t(ge,Na),t(w,Ua),r(e,mt,i),r(e,S,i),t(S,Za),t(S,Be),t(Be,Ga),t(S,Ja),r(e,ht,i),r(e,J,i),J.innerHTML=Ns,r(e,kt,i),r(e,pe,i),t(pe,x),t(x,Ka),t(x,$e),t($e,Qa),t(x,Va),t(x,je),t(je,Xa),t(x,Ya),r(e,yt,i),r(e,A,i),t(A,en),t(A,ze),t(ze,tn),t(A,an),r(e,vt,i),r(e,E,i),t(E,nn),t(E,Re),t(Re,sn),t(E,on),t(E,Fe),t(Fe,ln),t(E,pn),t(E,Ne),t(Ne,rn),t(E,cn),r(e,wt,i),r(e,C,i),t(C,un),t(C,Ue),t(Ue,fn),t(C,dn),t(C,Ze),t(Ze,mn),t(C,hn),r(e,_t,i),r(e,H,i),t(H,kn),t(H,Ge),t(Ge,yn),t(H,vn),r(e,Et,i),r(e,ie,i),t(ie,wn),r(e,bt,i),r(e,re,i),t(re,_n),r(e,Tt,i),r(e,W,i),t(W,Je),t(Je,En),t(W,bn),t(W,Ke),t(Ke,Tn),r(e,Dt,i),r(e,O,i),t(O,Dn),t(O,K),t(K,In),t(O,Cn),t(O,Qe),t(Qe,On),t(O,Pn),r(e,It,i),r(e,P,i),t(P,qn),t(P,Ve),t(Ve,xn),t(P,Mn),t(P,Q),t(Q,Sn),t(P,An)},p:oo,d(e){e&&a(c),e&&a(Xe),e&&a(Y),e&&a(Ye),e&&a(M),e&&a(et),e&&a(ee),e&&a(tt),e&&a(te),e&&a(at),e&&a(j),e&&a(nt),e&&a(ae),e&&a(st),e&&a(z),e&&a(ot),e&&a(I),e&&a(lt),e&&a(d),e&&a(pt),e&&a(y),e&&a(it),e&&a(ne),e&&a(rt),e&&a(se),e&&a(ct),e&&a(oe),e&&a(ut),e&&a(le),e&&a(ft),e&&a(G),e&&a(dt),e&&a(w),e&&a(mt),e&&a(S),e&&a(ht),e&&a(J),e&&a(kt),e&&a(pe),e&&a(yt),e&&a(A),e&&a(vt),e&&a(E),e&&a(wt),e&&a(C),e&&a(_t),e&&a(H),e&&a(Et),e&&a(ie),e&&a(bt),e&&a(re),e&&a(Tt),e&&a(W),e&&a(Dt),e&&a(O),e&&a(It),e&&a(P)}}}function io(V){let c,D;const _=[V[0],js];let B={$$slots:{default:[po]},$$scope:{ctx:V}};for(let h=0;h<_.length;h+=1)B=Hn(B,_[h]);return c=new lo({props:B}),{c(){Xs(c.$$.fragment)},l(h){Ys(c.$$.fragment,h)},m(h,v){eo(c,h,v),D=!0},p(h,[v]){const X=v&1?to(_,[v&1&&Bs(h[0]),v&0&&Bs(js)]):{};v&2&&(X.$$scope={dirty:v,ctx:h}),c.$set(X)},i(h){D||(ao(c.$$.fragment,h),D=!0)},o(h){no(c.$$.fragment,h),D=!1},d(h){so(c,h)}}}const js={title:"Deriving Derive Macros with Monoids",date:"2021-04-20T00:00:00.000Z",status:"published",blurb:"Custom derive macros are used in a number of rust libraries to make it easy and obvious to implement some trait for structs as long as all of its fields also implement that trait."};function ro(V,c,D){return V.$$set=_=>{D(0,c=Hn(Hn({},c),$s(_)))},c=$s(c),[c]}class fo extends Ks{constructor(c){super(),Qs(this,c,ro,io,Vs,{})}}export{fo as default,js as metadata};
